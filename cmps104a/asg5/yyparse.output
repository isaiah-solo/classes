Terminals unused in grammar

   TOK_PROTOTYPE
   TOK_NEWSTRING
   TOK_PARAMLIST
   TOK_FUNCTION
   TOK_INDEX
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_RETURNVOID
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_DECLID
   TOK_ROOT
   TOK_PTR
   TOK_GOTO
   TOK_SIZEOF
   TOK_VARDECL
   '%'


State 131 conflicts: 27 reduce/reduce
State 136 conflicts: 1 shift/reduce
State 146 conflicts: 27 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' fields '}'
    9          | TOK_STRUCT TOK_IDENT '{' '}'

   10 fields: fields fielddecl ';'
   11       | fielddecl ';'

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT
   13          | basetype TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_BOOL
   16         | TOK_CHAR
   17         | TOK_INT
   18         | TOK_STRING
   19         | TOK_IDENT

   20 function: identdecl '(' funcparams ')' block
   21         | identdecl '(' ')' block
   22         | identdecl '(' funcparams ')' ';'
   23         | identdecl '(' ')' ';'

   24 funcparams: funcparams ',' identdecl
   25           | identdecl

   26 identdecl: basetype TOK_ARRAY TOK_IDENT
   27          | basetype TOK_IDENT

   28 block: '{' statements '}'
   29      | '{' '}'
   30      | ';'

   31 statements: statements statement
   32           | statement

   33 statement: block
   34          | vardecl
   35          | while
   36          | ifelse
   37          | return
   38          | expr ';'

   39 vardecl: identdecl '=' expr ';'

   40 while: TOK_WHILE '(' expr ')' statement

   41 ifelse: TOK_IF '(' expr ')' statement else
   42       | TOK_IF '(' expr ')' statement

   43 else: TOK_ELSE statement

   44 return: TOK_RETURN expr ';'
   45       | TOK_RETURN ';'

   46 expr: BINOP
   47     | UNOP
   48     | allocator
   49     | call
   50     | '(' expr ')'
   51     | variable
   52     | constant

   53 allocator: TOK_NEW TOK_IDENT '(' ')'
   54          | TOK_NEW TOK_STRING '(' expr ')'
   55          | TOK_NEW basetype '[' expr ']'

   56 call: TOK_IDENT '(' ')'
   57     | TOK_IDENT '(' callparams ')'

   58 callparams: callparams ',' expr
   59           | expr

   60 variable: TOK_IDENT
   61         | expr '[' expr ']'
   62         | expr '.' TOK_IDENT

   63 constant: TOK_INTCON
   64         | TOK_CHARCON
   65         | TOK_STRINGCON
   66         | TOK_FALSE
   67         | TOK_TRUE
   68         | TOK_NULL

   69 BINOP: expr '=' expr
   70      | expr '+' expr
   71      | expr '-' expr
   72      | expr '*' expr
   73      | expr '/' expr
   74      | expr TOK_EQ expr
   75      | expr TOK_NE expr
   76      | expr TOK_LT expr
   77      | expr TOK_LE expr
   78      | expr TOK_GT expr
   79      | expr TOK_GE expr

   80 UNOP: '+' expr
   81     | '-' expr
   82     | '!' expr
   83     | TOK_ORD expr
   84     | TOK_CHR expr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 82
'%' (37)
'(' (40) 20 21 22 23 40 41 42 50 53 54 56 57
')' (41) 20 21 22 23 40 41 42 50 53 54 56 57
'*' (42) 72
'+' (43) 70 80
',' (44) 24 58
'-' (45) 71 81
'.' (46) 62
'/' (47) 73
';' (59) 6 10 11 22 23 30 38 39 44 45
'=' (61) 39 69
'[' (91) 55 61
']' (93) 55 61
'{' (123) 8 9 28 29
'}' (125) 5 8 9 28 29
error (256) 5 6
TOK_VOID (258) 14
TOK_BOOL (259) 15
TOK_CHAR (260) 16
TOK_INT (261) 17
TOK_STRING (262) 18 54
TOK_PROTOTYPE (263)
TOK_IF (264) 41 42
TOK_ELSE (265) 43
TOK_WHILE (266) 40
TOK_RETURN (267) 44 45
TOK_STRUCT (268) 8 9
TOK_NEWSTRING (269)
TOK_FALSE (270) 66
TOK_TRUE (271) 67
TOK_NULL (272) 68
TOK_NEW (273) 53 54 55
TOK_ARRAY (274) 12 26
TOK_PARAMLIST (275)
TOK_EQ (276) 74
TOK_NE (277) 75
TOK_LT (278) 76
TOK_LE (279) 77
TOK_GT (280) 78
TOK_GE (281) 79
TOK_FUNCTION (282)
TOK_IDENT (283) 8 9 12 13 19 26 27 53 56 57 60 62
TOK_INTCON (284) 63
TOK_CHARCON (285) 64
TOK_STRINGCON (286) 65
TOK_INDEX (287)
TOK_BLOCK (288)
TOK_CALL (289)
TOK_IFELSE (290)
TOK_INITDECL (291)
TOK_RETURNVOID (292)
TOK_POS (293)
TOK_NEG (294)
TOK_NEWARRAY (295)
TOK_TYPEID (296)
TOK_FIELD (297)
TOK_DECLID (298)
TOK_ORD (299) 83
TOK_CHR (300) 84
TOK_ROOT (301)
TOK_PTR (302)
TOK_GOTO (303)
TOK_SIZEOF (304)
TOK_VARDECL (305)


Nonterminals, with rules where they appear

$accept (67)
    on left: 0
start (68)
    on left: 1, on right: 0
program (69)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (70)
    on left: 8 9, on right: 2
fields (71)
    on left: 10 11, on right: 8 10
fielddecl (72)
    on left: 12 13, on right: 10 11
basetype (73)
    on left: 14 15 16 17 18 19, on right: 12 13 26 27 55
function (74)
    on left: 20 21 22 23, on right: 3
funcparams (75)
    on left: 24 25, on right: 20 22 24
identdecl (76)
    on left: 26 27, on right: 20 21 22 23 24 25 39
block (77)
    on left: 28 29 30, on right: 20 21 33
statements (78)
    on left: 31 32, on right: 28 31
statement (79)
    on left: 33 34 35 36 37 38, on right: 4 31 32 40 41 42 43
vardecl (80)
    on left: 39, on right: 34
while (81)
    on left: 40, on right: 35
ifelse (82)
    on left: 41 42, on right: 36
else (83)
    on left: 43, on right: 41
return (84)
    on left: 44 45, on right: 37
expr (85)
    on left: 46 47 48 49 50 51 52, on right: 38 39 40 41 42 44 50 54
    55 58 59 61 62 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84
allocator (86)
    on left: 53 54 55, on right: 48
call (87)
    on left: 56 57, on right: 49
callparams (88)
    on left: 58 59, on right: 57 58
variable (89)
    on left: 60 61 62, on right: 51
constant (90)
    on left: 63 64 65 66 67 68, on right: 52
BINOP (91)
    on left: 69 70 71 72 73 74 75 76 77 78 79, on right: 46
UNOP (92)
    on left: 80 81 82 83 84, on right: 47


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28
    '('            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    basetype   go to state 31
    function   go to state 32
    identdecl  go to state 33
    block      go to state 34
    statement  go to state 35
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 47
    ';'  shift, and go to state 48


state 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


state 6

   15 basetype: TOK_BOOL .

    $default  reduce using rule 15 (basetype)


state 7

   16 basetype: TOK_CHAR .

    $default  reduce using rule 16 (basetype)


state 8

   17 basetype: TOK_INT .

    $default  reduce using rule 17 (basetype)


state 9

   18 basetype: TOK_STRING .

    $default  reduce using rule 18 (basetype)


state 10

   41 ifelse: TOK_IF . '(' expr ')' statement else
   42       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 49


state 11

   40 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 50


state 12

   44 return: TOK_RETURN . expr ';'
   45       | TOK_RETURN . ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    ';'            shift, and go to state 52
    '('            shift, and go to state 29

    expr       go to state 53
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 13

    8 structdef: TOK_STRUCT . TOK_IDENT '{' fields '}'
    9          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 54


state 14

   66 constant: TOK_FALSE .

    $default  reduce using rule 66 (constant)


state 15

   67 constant: TOK_TRUE .

    $default  reduce using rule 67 (constant)


state 16

   68 constant: TOK_NULL .

    $default  reduce using rule 68 (constant)


state 17

   53 allocator: TOK_NEW . TOK_IDENT '(' ')'
   54          | TOK_NEW . TOK_STRING '(' expr ')'
   55          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 55
    TOK_IDENT   shift, and go to state 56

    basetype  go to state 57


state 18

   19 basetype: TOK_IDENT .
   56 call: TOK_IDENT . '(' ')'
   57     | TOK_IDENT . '(' callparams ')'
   60 variable: TOK_IDENT .

    '('  shift, and go to state 58

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_IDENT  reduce using rule 19 (basetype)
    $default   reduce using rule 60 (variable)


state 19

   63 constant: TOK_INTCON .

    $default  reduce using rule 63 (constant)


state 20

   64 constant: TOK_CHARCON .

    $default  reduce using rule 64 (constant)


state 21

   65 constant: TOK_STRINGCON .

    $default  reduce using rule 65 (constant)


state 22

   83 UNOP: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 59
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 23

   84 UNOP: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 60
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 24

   80 UNOP: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 61
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 25

   81 UNOP: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 62
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 26

   82 UNOP: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 63
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 27

   30 block: ';' .

    $default  reduce using rule 30 (block)


state 28

   28 block: '{' . statements '}'
   29      | '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '}'            shift, and go to state 64
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28
    '('            shift, and go to state 29

    basetype    go to state 31
    identdecl   go to state 65
    block       go to state 34
    statements  go to state 66
    statement   go to state 67
    vardecl     go to state 36
    while       go to state 37
    ifelse      go to state 38
    return      go to state 39
    expr        go to state 40
    allocator   go to state 41
    call        go to state 42
    variable    go to state 43
    constant    go to state 44
    BINOP       go to state 45
    UNOP        go to state 46


state 29

   50 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 68
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 31

   26 identdecl: basetype . TOK_ARRAY TOK_IDENT
   27          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 69
    TOK_IDENT  shift, and go to state 70


state 32

    3 program: program function .

    $default  reduce using rule 3 (program)


state 33

   20 function: identdecl . '(' funcparams ')' block
   21         | identdecl . '(' ')' block
   22         | identdecl . '(' funcparams ')' ';'
   23         | identdecl . '(' ')' ';'
   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 71
    '('  shift, and go to state 72


state 34

   33 statement: block .

    $default  reduce using rule 33 (statement)


state 35

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 36

   34 statement: vardecl .

    $default  reduce using rule 34 (statement)


state 37

   35 statement: while .

    $default  reduce using rule 35 (statement)


state 38

   36 statement: ifelse .

    $default  reduce using rule 36 (statement)


state 39

   37 statement: return .

    $default  reduce using rule 37 (statement)


state 40

   38 statement: expr . ';'
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ';'     shift, and go to state 86


state 41

   48 expr: allocator .

    $default  reduce using rule 48 (expr)


state 42

   49 expr: call .

    $default  reduce using rule 49 (expr)


state 43

   51 expr: variable .

    $default  reduce using rule 51 (expr)


state 44

   52 expr: constant .

    $default  reduce using rule 52 (expr)


state 45

   46 expr: BINOP .

    $default  reduce using rule 46 (expr)


state 46

   47 expr: UNOP .

    $default  reduce using rule 47 (expr)


state 47

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 48

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 49

   41 ifelse: TOK_IF '(' . expr ')' statement else
   42       | TOK_IF '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 87
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 50

   40 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 88
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 51

   56 call: TOK_IDENT . '(' ')'
   57     | TOK_IDENT . '(' callparams ')'
   60 variable: TOK_IDENT .

    '('  shift, and go to state 58

    $default  reduce using rule 60 (variable)


state 52

   45 return: TOK_RETURN ';' .

    $default  reduce using rule 45 (return)


state 53

   44 return: TOK_RETURN expr . ';'
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ';'     shift, and go to state 89


state 54

    8 structdef: TOK_STRUCT TOK_IDENT . '{' fields '}'
    9          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 90


state 55

   18 basetype: TOK_STRING .
   54 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 91

    $default  reduce using rule 18 (basetype)


state 56

   19 basetype: TOK_IDENT .
   53 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 92

    $default  reduce using rule 19 (basetype)


state 57

   55 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 93


state 58

   56 call: TOK_IDENT '(' . ')'
   57     | TOK_IDENT '(' . callparams ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29
    ')'            shift, and go to state 94

    expr        go to state 95
    allocator   go to state 41
    call        go to state 42
    callparams  go to state 96
    variable    go to state 43
    constant    go to state 44
    BINOP       go to state 45
    UNOP        go to state 46


state 59

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr
   83 UNOP: TOK_ORD expr .

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 83 (UNOP)


state 60

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr
   84 UNOP: TOK_CHR expr .

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 84 (UNOP)


state 61

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr
   80 UNOP: '+' expr .

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 80 (UNOP)


state 62

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr
   81 UNOP: '-' expr .

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 81 (UNOP)


state 63

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr
   82 UNOP: '!' expr .

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 82 (UNOP)


state 64

   29 block: '{' '}' .

    $default  reduce using rule 29 (block)


state 65

   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 71


state 66

   28 block: '{' statements . '}'
   31 statements: statements . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '}'            shift, and go to state 97
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28
    '('            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 65
    block      go to state 34
    statement  go to state 98
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 67

   32 statements: statement .

    $default  reduce using rule 32 (statements)


state 68

   50 expr: '(' expr . ')'
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ')'     shift, and go to state 99


state 69

   26 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 100


state 70

   27 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 27 (identdecl)


state 71

   39 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 101
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 72

   20 function: identdecl '(' . funcparams ')' block
   21         | identdecl '(' . ')' block
   22         | identdecl '(' . funcparams ')' ';'
   23         | identdecl '(' . ')' ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102
    ')'         shift, and go to state 103

    basetype    go to state 31
    funcparams  go to state 104
    identdecl   go to state 105


state 73

   74 BINOP: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 106
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 74

   75 BINOP: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 107
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 75

   76 BINOP: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 108
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 76

   77 BINOP: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 109
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 77

   78 BINOP: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 110
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 78

   79 BINOP: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 111
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 79

   69 BINOP: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 112
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 80

   70 BINOP: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 113
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 81

   71 BINOP: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 114
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 82

   72 BINOP: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 115
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 83

   73 BINOP: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 116
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 84

   61 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 117
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 85

   62 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 118


state 86

   38 statement: expr ';' .

    $default  reduce using rule 38 (statement)


state 87

   41 ifelse: TOK_IF '(' expr . ')' statement else
   42       | TOK_IF '(' expr . ')' statement
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ')'     shift, and go to state 119


state 88

   40 while: TOK_WHILE '(' expr . ')' statement
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ')'     shift, and go to state 120


state 89

   44 return: TOK_RETURN expr ';' .

    $default  reduce using rule 44 (return)


state 90

    8 structdef: TOK_STRUCT TOK_IDENT '{' . fields '}'
    9          | TOK_STRUCT TOK_IDENT '{' . '}'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102
    '}'         shift, and go to state 121

    fields     go to state 122
    fielddecl  go to state 123
    basetype   go to state 124


state 91

   54 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 125
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 92

   53 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 126


state 93

   55 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 127
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 94

   56 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 56 (call)


state 95

   59 callparams: expr .
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85

    $default  reduce using rule 59 (callparams)


state 96

   57 call: TOK_IDENT '(' callparams . ')'
   58 callparams: callparams . ',' expr

    ')'  shift, and go to state 128
    ','  shift, and go to state 129


state 97

   28 block: '{' statements '}' .

    $default  reduce using rule 28 (block)


state 98

   31 statements: statements statement .

    $default  reduce using rule 31 (statements)


state 99

   50 expr: '(' expr ')' .

    $default  reduce using rule 50 (expr)


state 100

   26 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


state 101

   39 vardecl: identdecl '=' expr . ';'
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ';'     shift, and go to state 130


state 102

   19 basetype: TOK_IDENT .

    $default  reduce using rule 19 (basetype)


state 103

   21 function: identdecl '(' ')' . block
   23         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 131
    '{'  shift, and go to state 28

    block  go to state 132


state 104

   20 function: identdecl '(' funcparams . ')' block
   22         | identdecl '(' funcparams . ')' ';'
   24 funcparams: funcparams . ',' identdecl

    ')'  shift, and go to state 133
    ','  shift, and go to state 134


state 105

   25 funcparams: identdecl .

    $default  reduce using rule 25 (funcparams)


state 106

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   74      | expr TOK_EQ expr .
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81
    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 74 (BINOP)


state 107

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   75      | expr TOK_NE expr .
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81
    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 75 (BINOP)


state 108

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   76      | expr TOK_LT expr .
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81
    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 76 (BINOP)


state 109

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   77      | expr TOK_LE expr .
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81
    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 77 (BINOP)


state 110

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   78      | expr TOK_GT expr .
   79      | expr . TOK_GE expr

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81
    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 78 (BINOP)


state 111

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr
   79      | expr TOK_GE expr .

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81
    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 79 (BINOP)


state 112

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   69      | expr '=' expr .
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85

    $default  reduce using rule 69 (BINOP)


state 113

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   70      | expr '+' expr .
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 70 (BINOP)


state 114

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   71      | expr '-' expr .
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '*'  shift, and go to state 82
    '/'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 71 (BINOP)


state 115

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   72      | expr '*' expr .
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 72 (BINOP)


state 116

   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   73      | expr '/' expr .
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 73 (BINOP)


state 117

   61 variable: expr . '[' expr ']'
   61         | expr '[' expr . ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ']'     shift, and go to state 135


state 118

   62 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 62 (variable)


state 119

   41 ifelse: TOK_IF '(' expr ')' . statement else
   42       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28
    '('            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 65
    block      go to state 34
    statement  go to state 136
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 120

   40 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28
    '('            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 65
    block      go to state 34
    statement  go to state 137
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 121

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 9 (structdef)


state 122

    8 structdef: TOK_STRUCT TOK_IDENT '{' fields . '}'
   10 fields: fields . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102
    '}'         shift, and go to state 138

    fielddecl  go to state 139
    basetype   go to state 124


state 123

   11 fields: fielddecl . ';'

    ';'  shift, and go to state 140


state 124

   12 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   13          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 141
    TOK_IDENT  shift, and go to state 142


state 125

   54 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ')'     shift, and go to state 143


state 126

   53 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 53 (allocator)


state 127

   55 allocator: TOK_NEW basetype '[' expr . ']'
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85
    ']'     shift, and go to state 144


state 128

   57 call: TOK_IDENT '(' callparams ')' .

    $default  reduce using rule 57 (call)


state 129

   58 callparams: callparams ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 29

    expr       go to state 145
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 130

   39 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 39 (vardecl)


state 131

   23 function: identdecl '(' ')' ';' .
   30 block: ';' .

    $end           reduce using rule 23 (function)
    $end           [reduce using rule 30 (block)]
    error          reduce using rule 23 (function)
    error          [reduce using rule 30 (block)]
    TOK_VOID       reduce using rule 23 (function)
    TOK_VOID       [reduce using rule 30 (block)]
    TOK_BOOL       reduce using rule 23 (function)
    TOK_BOOL       [reduce using rule 30 (block)]
    TOK_CHAR       reduce using rule 23 (function)
    TOK_CHAR       [reduce using rule 30 (block)]
    TOK_INT        reduce using rule 23 (function)
    TOK_INT        [reduce using rule 30 (block)]
    TOK_STRING     reduce using rule 23 (function)
    TOK_STRING     [reduce using rule 30 (block)]
    TOK_IF         reduce using rule 23 (function)
    TOK_IF         [reduce using rule 30 (block)]
    TOK_WHILE      reduce using rule 23 (function)
    TOK_WHILE      [reduce using rule 30 (block)]
    TOK_RETURN     reduce using rule 23 (function)
    TOK_RETURN     [reduce using rule 30 (block)]
    TOK_STRUCT     reduce using rule 23 (function)
    TOK_STRUCT     [reduce using rule 30 (block)]
    TOK_FALSE      reduce using rule 23 (function)
    TOK_FALSE      [reduce using rule 30 (block)]
    TOK_TRUE       reduce using rule 23 (function)
    TOK_TRUE       [reduce using rule 30 (block)]
    TOK_NULL       reduce using rule 23 (function)
    TOK_NULL       [reduce using rule 30 (block)]
    TOK_NEW        reduce using rule 23 (function)
    TOK_NEW        [reduce using rule 30 (block)]
    TOK_IDENT      reduce using rule 23 (function)
    TOK_IDENT      [reduce using rule 30 (block)]
    TOK_INTCON     reduce using rule 23 (function)
    TOK_INTCON     [reduce using rule 30 (block)]
    TOK_CHARCON    reduce using rule 23 (function)
    TOK_CHARCON    [reduce using rule 30 (block)]
    TOK_STRINGCON  reduce using rule 23 (function)
    TOK_STRINGCON  [reduce using rule 30 (block)]
    TOK_ORD        reduce using rule 23 (function)
    TOK_ORD        [reduce using rule 30 (block)]
    TOK_CHR        reduce using rule 23 (function)
    TOK_CHR        [reduce using rule 30 (block)]
    '+'            reduce using rule 23 (function)
    '+'            [reduce using rule 30 (block)]
    '-'            reduce using rule 23 (function)
    '-'            [reduce using rule 30 (block)]
    '!'            reduce using rule 23 (function)
    '!'            [reduce using rule 30 (block)]
    ';'            reduce using rule 23 (function)
    ';'            [reduce using rule 30 (block)]
    '{'            reduce using rule 23 (function)
    '{'            [reduce using rule 30 (block)]
    '('            reduce using rule 23 (function)
    '('            [reduce using rule 30 (block)]
    $default       reduce using rule 23 (function)


state 132

   21 function: identdecl '(' ')' block .

    $default  reduce using rule 21 (function)


state 133

   20 function: identdecl '(' funcparams ')' . block
   22         | identdecl '(' funcparams ')' . ';'

    ';'  shift, and go to state 146
    '{'  shift, and go to state 28

    block  go to state 147


state 134

   24 funcparams: funcparams ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 102

    basetype   go to state 31
    identdecl  go to state 148


state 135

   61 variable: expr '[' expr ']' .

    $default  reduce using rule 61 (variable)


state 136

   41 ifelse: TOK_IF '(' expr ')' statement . else
   42       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 149

    TOK_ELSE  [reduce using rule 42 (ifelse)]
    $default  reduce using rule 42 (ifelse)

    else  go to state 150


state 137

   40 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 40 (while)


state 138

    8 structdef: TOK_STRUCT TOK_IDENT '{' fields '}' .

    $default  reduce using rule 8 (structdef)


state 139

   10 fields: fields fielddecl . ';'

    ';'  shift, and go to state 151


state 140

   11 fields: fielddecl ';' .

    $default  reduce using rule 11 (fields)


state 141

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 152


state 142

   13 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


state 143

   54 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 54 (allocator)


state 144

   55 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 55 (allocator)


state 145

   58 callparams: callparams ',' expr .
   61 variable: expr . '[' expr ']'
   62         | expr . '.' TOK_IDENT
   69 BINOP: expr . '=' expr
   70      | expr . '+' expr
   71      | expr . '-' expr
   72      | expr . '*' expr
   73      | expr . '/' expr
   74      | expr . TOK_EQ expr
   75      | expr . TOK_NE expr
   76      | expr . TOK_LT expr
   77      | expr . TOK_LE expr
   78      | expr . TOK_GT expr
   79      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 73
    TOK_NE  shift, and go to state 74
    TOK_LT  shift, and go to state 75
    TOK_LE  shift, and go to state 76
    TOK_GT  shift, and go to state 77
    TOK_GE  shift, and go to state 78
    '='     shift, and go to state 79
    '+'     shift, and go to state 80
    '-'     shift, and go to state 81
    '*'     shift, and go to state 82
    '/'     shift, and go to state 83
    '['     shift, and go to state 84
    '.'     shift, and go to state 85

    $default  reduce using rule 58 (callparams)


state 146

   22 function: identdecl '(' funcparams ')' ';' .
   30 block: ';' .

    $end           reduce using rule 22 (function)
    $end           [reduce using rule 30 (block)]
    error          reduce using rule 22 (function)
    error          [reduce using rule 30 (block)]
    TOK_VOID       reduce using rule 22 (function)
    TOK_VOID       [reduce using rule 30 (block)]
    TOK_BOOL       reduce using rule 22 (function)
    TOK_BOOL       [reduce using rule 30 (block)]
    TOK_CHAR       reduce using rule 22 (function)
    TOK_CHAR       [reduce using rule 30 (block)]
    TOK_INT        reduce using rule 22 (function)
    TOK_INT        [reduce using rule 30 (block)]
    TOK_STRING     reduce using rule 22 (function)
    TOK_STRING     [reduce using rule 30 (block)]
    TOK_IF         reduce using rule 22 (function)
    TOK_IF         [reduce using rule 30 (block)]
    TOK_WHILE      reduce using rule 22 (function)
    TOK_WHILE      [reduce using rule 30 (block)]
    TOK_RETURN     reduce using rule 22 (function)
    TOK_RETURN     [reduce using rule 30 (block)]
    TOK_STRUCT     reduce using rule 22 (function)
    TOK_STRUCT     [reduce using rule 30 (block)]
    TOK_FALSE      reduce using rule 22 (function)
    TOK_FALSE      [reduce using rule 30 (block)]
    TOK_TRUE       reduce using rule 22 (function)
    TOK_TRUE       [reduce using rule 30 (block)]
    TOK_NULL       reduce using rule 22 (function)
    TOK_NULL       [reduce using rule 30 (block)]
    TOK_NEW        reduce using rule 22 (function)
    TOK_NEW        [reduce using rule 30 (block)]
    TOK_IDENT      reduce using rule 22 (function)
    TOK_IDENT      [reduce using rule 30 (block)]
    TOK_INTCON     reduce using rule 22 (function)
    TOK_INTCON     [reduce using rule 30 (block)]
    TOK_CHARCON    reduce using rule 22 (function)
    TOK_CHARCON    [reduce using rule 30 (block)]
    TOK_STRINGCON  reduce using rule 22 (function)
    TOK_STRINGCON  [reduce using rule 30 (block)]
    TOK_ORD        reduce using rule 22 (function)
    TOK_ORD        [reduce using rule 30 (block)]
    TOK_CHR        reduce using rule 22 (function)
    TOK_CHR        [reduce using rule 30 (block)]
    '+'            reduce using rule 22 (function)
    '+'            [reduce using rule 30 (block)]
    '-'            reduce using rule 22 (function)
    '-'            [reduce using rule 30 (block)]
    '!'            reduce using rule 22 (function)
    '!'            [reduce using rule 30 (block)]
    ';'            reduce using rule 22 (function)
    ';'            [reduce using rule 30 (block)]
    '{'            reduce using rule 22 (function)
    '{'            [reduce using rule 30 (block)]
    '('            reduce using rule 22 (function)
    '('            [reduce using rule 30 (block)]
    $default       reduce using rule 22 (function)


state 147

   20 function: identdecl '(' funcparams ')' block .

    $default  reduce using rule 20 (function)


state 148

   24 funcparams: funcparams ',' identdecl .

    $default  reduce using rule 24 (funcparams)


state 149

   43 else: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28
    '('            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 65
    block      go to state 34
    statement  go to state 153
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    variable   go to state 43
    constant   go to state 44
    BINOP      go to state 45
    UNOP       go to state 46


state 150

   41 ifelse: TOK_IF '(' expr ')' statement else .

    $default  reduce using rule 41 (ifelse)


state 151

   10 fields: fields fielddecl ';' .

    $default  reduce using rule 10 (fields)


state 152

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


state 153

   43 else: TOK_ELSE statement .

    $default  reduce using rule 43 (else)
