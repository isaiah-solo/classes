# 3 "lexer.mll"
 
(******** BEGIN LEXER SEMANTICS ********)

open Absyn
open Etc
open Lexing
open Parser
open Printf

let lexerror lexbuf =
    lexeprint (lexeme_start_p lexbuf)
              ["invalid character `" ^ (lexeme lexbuf) ^ "'"]

let newline lexbuf =
    let incrline pos =
        {pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum}
    in  (lexbuf.lex_start_p <- incrline lexbuf.lex_start_p;
         lexbuf.lex_curr_p <- incrline lexbuf.lex_curr_p)

let list lexbuf =
    let pos = lexeme_start_p lexbuf
    in  (if pos.pos_bol = pos.pos_cnum
         then printf ";;%4d: " pos.pos_lnum;
         printf "%s" (lexeme lexbuf))

let keylist = [
        "dim"  , DIM   ;
        "goto" , GOTO  ;
        "if"   , IF    ;
        "input", INPUT ;
        "let"  , LET   ;
        "print", PRINT ;
    ]

let keyhash : (string, token) Hashtbl.t
            = Hashtbl.create (List.length keylist)

let _ = List.iter (fun (word, token) -> Hashtbl.add keyhash word token)
                   keylist

let identkeyword ident =
    try Hashtbl.find keyhash ident
    with Not_found -> IDENT ident

(******** END LEXER SEMANTICS ********)

# 49 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\232\255\075\000\002\000\150\000\162\000\236\255\237\255\
    \238\255\239\255\240\255\241\255\002\000\030\000\247\255\248\255\
    \249\255\250\255\251\255\252\255\001\000\254\255\255\255\244\255\
    \246\255\242\255\184\000\195\000\217\000\227\000\237\000\234\255\
    \004\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\022\000\023\000\023\000\020\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\012\000\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\020\000\020\000\255\255\020\000\255\255\
    \255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\032\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \032\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\019\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\003\000\020\000\031\000\007\000\031\000\000\000\
    \016\000\015\000\009\000\011\000\017\000\010\000\004\000\008\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\018\000\000\000\013\000\014\000\012\000\025\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\023\000\024\000\000\000\006\000\002\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
    \000\000\000\000\002\000\000\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \027\000\000\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\029\000\000\000\029\000\000\000\026\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\000\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
    \022\000\255\255\255\255\000\000\255\255\000\000\000\000\026\000\
    \026\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\003\000\255\255\032\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\003\000\000\000\032\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\012\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\013\000\255\255\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\255\255\255\255\
    \255\255\255\255\002\000\255\255\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\026\000\255\255\026\000\255\255\005\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\255\255\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\255\255\255\255\255\255\
    \000\000\020\000\003\000\255\255\032\000\255\255\255\255\005\000\
    \027\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \027\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\030\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\030\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 61 "lexer.mll"
                    ( EOF )
# 216 "lexer.ml"

  | 1 ->
# 62 "lexer.mll"
                    ( list lexbuf; token lexbuf )
# 221 "lexer.ml"

  | 2 ->
# 63 "lexer.mll"
                    ( list lexbuf; token lexbuf )
# 226 "lexer.ml"

  | 3 ->
# 64 "lexer.mll"
                    ( list lexbuf; newline lexbuf; EOL )
# 231 "lexer.ml"

  | 4 ->
# 65 "lexer.mll"
                    ( list lexbuf; COLON )
# 236 "lexer.ml"

  | 5 ->
# 66 "lexer.mll"
                    ( list lexbuf; COMMA )
# 241 "lexer.ml"

  | 6 ->
# 67 "lexer.mll"
                    ( list lexbuf; LPAR )
# 246 "lexer.ml"

  | 7 ->
# 68 "lexer.mll"
                    ( list lexbuf; RPAR )
# 251 "lexer.ml"

  | 8 ->
# 69 "lexer.mll"
                    ( list lexbuf; EQUAL (lexeme lexbuf) )
# 256 "lexer.ml"

  | 9 ->
# 70 "lexer.mll"
                    ( list lexbuf; RELOP (lexeme lexbuf) )
# 261 "lexer.ml"

  | 10 ->
# 71 "lexer.mll"
                    ( list lexbuf; RELOP (lexeme lexbuf) )
# 266 "lexer.ml"

  | 11 ->
# 72 "lexer.mll"
                    ( list lexbuf; RELOP (lexeme lexbuf) )
# 271 "lexer.ml"

  | 12 ->
# 73 "lexer.mll"
                    ( list lexbuf; RELOP (lexeme lexbuf) )
# 276 "lexer.ml"

  | 13 ->
# 74 "lexer.mll"
                    ( list lexbuf; RELOP (lexeme lexbuf) )
# 281 "lexer.ml"

  | 14 ->
# 75 "lexer.mll"
                    ( list lexbuf; ADDOP (lexeme lexbuf) )
# 286 "lexer.ml"

  | 15 ->
# 76 "lexer.mll"
                    ( list lexbuf; ADDOP (lexeme lexbuf) )
# 291 "lexer.ml"

  | 16 ->
# 77 "lexer.mll"
                    ( list lexbuf; MULOP (lexeme lexbuf) )
# 296 "lexer.ml"

  | 17 ->
# 78 "lexer.mll"
                    ( list lexbuf; MULOP (lexeme lexbuf) )
# 301 "lexer.ml"

  | 18 ->
# 79 "lexer.mll"
                    ( list lexbuf; MULOP (lexeme lexbuf) )
# 306 "lexer.ml"

  | 19 ->
# 80 "lexer.mll"
                    ( list lexbuf; POWOP (lexeme lexbuf) )
# 311 "lexer.ml"

  | 20 ->
# 81 "lexer.mll"
                    ( list lexbuf; NUMBER (lexeme lexbuf) )
# 316 "lexer.ml"

  | 21 ->
# 82 "lexer.mll"
                    ( list lexbuf; STRING (lexeme lexbuf) )
# 321 "lexer.ml"

  | 22 ->
# 83 "lexer.mll"
                    ( list lexbuf; identkeyword (lexeme lexbuf) )
# 326 "lexer.ml"

  | 23 ->
# 84 "lexer.mll"
                    ( list lexbuf; lexerror lexbuf; token lexbuf )
# 331 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

